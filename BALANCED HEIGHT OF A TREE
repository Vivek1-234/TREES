//   program to find the our tree is balanced height tree or not   ---->>>>>>>>>

//  let's see the code ---------->>>>>>>>



 #include"bits/stdc++.h"
 using namespace std;

 struct node{

   int data ;
   node* left;
   node* right;

   node(int x){
   data = x ;
   right = NULL;
   left = NULL;

   }

 };

//  int height(node* root ){

//      if(root == NULL){
//          return 0 ; 
//      }
     
//      int lh = height(root->left);
//      int rh = height(root->right);

//      return max(lh , rh) +1 ;
//  }

// bool balancedheight(node* root ){
//     if(root==NULL){
//         return true  ;
//     }

//     if(balancedheight(root->left) == false){
//         return false ;
//     }
//      if(balancedheight(root->right) == false){
//         return false ;
//     }

//     int lh = height(root->left);
//     int rh = height(root->right);

//     if(abs(lh-rh)<=1){
//         return true ;
//     }

//     else{
//         return false ;
//     }

// }

//  now we will se this code in o(n )--->>>>>>>>> time complexity because our above code will run in te o(n2)  -->>>>>>>>>

bool balancedheight(node* root , int *height ){
    if(root==NULL){
        return true  ;
    }
  
  int lh =0 , rh = 0 ;
    if(balancedheight(root->left , &lh) == false){
        return false ;
    }
     if(balancedheight(root->right , &rh) == false){
        return false ;
    }
     
     *height = max(lh, rh)+1;
    
    if(abs(lh-rh)<=1){
        return true ;
    }

    else{
        return false ;
    }

}





 int main(){

  node* root ;

  root = new node(1);
  root->left = new node(2);
  root->right = new node(3); 
  root->left->left = new node(4); 
  root->left->right = new node(5); 
  root->right->left = new node(6); 
  root->right->right = new node(7); 
  
  int height =  0 ;
   if(balancedheight(root , &height)){
       cout<<"Balanced tree"<<endl;
   }
   else{
       cout<<"Unbalanced tree"<<endl;
   }
  
 return 0;
  }    
