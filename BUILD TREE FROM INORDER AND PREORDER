//  Build tree form the preorder and the inorder --------->>>>>>>>>>>>>>>>>>>

#include<iostream>
using namespace std;

 #include<iostream>
 using namespace std;
 struct Node{

   int data ;
   Node* left;
   Node* right;

   Node(int x){
   data = x ;
   right = NULL;
   left = NULL;
   }
  
 

 };
int search(int inorder[] , int start , int end , int cur){
    for(int i =start ;i<=end; i++){
        if(inorder[i] == cur){
            return i ; 
        }
    }
    return -1 ; 
}

Node* buildtree(int preorder[] , int inorder[] , int start , int end ){
    static int idx = 0 ; 
    if(start>end){
        return NULL;
    }
    int cur = preorder[idx];
    idx++;
    Node* node = new Node(cur);
   
   if(start == end){
       return node ;
   }
   
   int pos = search(inorder ,start , end , cur);

   node->left = buildtree( preorder , inorder  , start , pos-1);
   node->right = buildtree( preorder , inorder  , pos+1 , end);

return node;

}

void printinorder(Node* root){
    if(root ==NULL){
        return ; 
    }
     printinorder(root->left);
     cout<<root->data<<" ";
     printinorder(root->right);
    
}
int main(){
int preorder[]  = {1 ,2 ,4 ,3,5};
int inorder[]  = {4 ,2,1,5 ,3};

 Node* root = buildtree(preorder , inorder  , 0 , 4);
 printinorder(root);

return 0;
 }
